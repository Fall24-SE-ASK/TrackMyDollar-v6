on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  push:
    branches:
      - main
      - development

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest flake8 bandit

      - name: Run Tests
        run: |
          coverage run -m pytest test/
          COVERAGE=$(coverage report -m | grep 'TOTAL' | awk '{print $4}' | cut -d '%' -f1)
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
      
      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 15d3ab1238848f946ed98c192fb45195
          filename: coverage.json
          label: Coverage
          message: ${{ env.COVERAGE }}%  # Set the percentage value
          color: ${{ steps.set_coverage.outputs.coverage >= 70 && 'green' || 'red' }}  # Use GitHub Actions conditional syntax
        continue-on-error: true

      - name: Run Flake8 (Static Code Analysis)
        run: |
          flake8 code/ --max-line-length=120
        continue-on-error: true

      - name: Check Flake8 result and set status
        run: |
          if [ $? -eq 0 ]; then
            echo "STATIC_CODE_STATUS=Pass" >> $GITHUB_ENV
          else
            echo "STATIC_CODE_STATUS=Fail" >> $GITHUB_ENV
          fi

      - name: Create Static Code Analysis Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: c440db3fed64acd19235da2713aa8c7f
          filename: Static_code_analysis.json
          label: Static Code Analysis
          message: ${{ env.STATIC_CODE_STATUS }}
          color: ${{ env.STATIC_CODE_STATUS == 'Pass' && 'green' || 'red' }}
        continue-on-error: true

      - name: Run Bandit (Security Scanning)
        run: |
          bandit -r code/
        continue-on-error: true

      - name: Check Bandit result and set status
        run: |
          if [ $? -eq 0 ]; then
            echo "SECURITY_STATUS=Pass" >> $GITHUB_ENV
          else
            echo "SECURITY_STATUS=Fail" >> $GITHUB_ENV
          fi

      - name: Create Security Scan Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 3e60ee211c19e4f20d7c8bb5736f9361
          filename: Security_scan.json
          label: Security Scan
          message: ${{ env.SECURITY_STATUS }}
          color: ${{ env.SECURITY_STATUS == 'Pass' && 'green' || 'red' }}
        continue-on-error: true
